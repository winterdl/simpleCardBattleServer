syntax = "proto3";

package cardBattle;

service cardBattleService {
    rpc cardBattleRegister(player) returns (player) {}
    rpc cardBattleRoomStream(stream roomStream) returns (stream roomStream) {}
    rpc cardBattleLobbyStream(stream lobbyStream) returns (stream lobbyStream) {}
    rpc cardBattleQueueStream(stream queueStream) returns (stream queueStream) {}
    rpc cardBattleShopStream(stream shopStream) returns (stream shopStream) {}
    rpc cardBattleProfileStream(stream profileStream) returns (stream profileStream) {}
}

message player {
    string id = 1;
    string name = 2;
    string avatar = 3;
    int32 level = 4;
    int64 cash = 5;
    int64 exp = 6;
    int64 maxExp = 7;
    int32 maxReserveSlot = 8;
    int32 maxDeckSlot = 9;
}

message allPlayer {
    repeated player players = 1;
}

message card {
    string id = 1;
    string image = 2;
    int64 price = 3;
    int32 level = 4;
    int64 atk = 5;
    int64 def = 6;
    int32 color = 7;
    string name = 8;
}

message allCard {
    repeated card cards = 1;
}

message playerAndCard {
    player client = 1;
    card cardData = 2;
}

message playerAndSlot {
    player Owner = 1;

    // type slotType
    // 1 = slot for deck
    // 2 = slot for reserve
    int32 slotType = 2;
}


message lobbyStream {
   oneof event {

        // for broadcast
        player playerJoin = 1;
        player playerLeft = 2;

        // for client him self
        allPlayer getAllPlayers = 3;
        player getOneplayer = 4;
        player playerSuccessJoin = 5;
        player playerSuccessLeft = 6;
        playerWithCards onePlayerWithCards = 7;
        exceptionErrorMessage excMessage = 8;
    }
}

message profileStream {
    oneof event {

        // for client him self
        playerWithCards onePlayerWithCards = 1;
        playerAndCard addCardToDeck = 2;
        playerAndCard removeCardFromDeck = 3;
        exceptionErrorMessage excMessage = 4;
    }
}

message shopStream {

    oneof event {

        // for broadcast
        player playerJoin = 1;
        int32 shopRefreshTime = 2;
        bool shopRefresh = 3;

        // for client him self
        playerWithCards onePlayerWithCards = 4;
        allCard allCardInShopping = 5;
        playerAndCard onBuyCard = 6;
        bool onCardBought = 7;
        playerAndCard onSellCard = 8;
        bool onCardSold = 9;
        playerAndCard onUpgradeCard = 10;
        bool onCardUpgraded = 11;
        playerAndSlot onCardDeckSlot = 12;
        bool onSuccessAddSlot = 13;
        exceptionErrorMessage excMessage = 14;
    }
}


message queueStream {
       oneof event {
            player onjoinWaitingRoom = 1;
            player onLeftWaitingRoom = 2;
            roomData onBattleFound = 3;
            bool onBattleNotFound = 4;
       }
}


message playerWithCards {
    player owner = 1;
    repeated card deck = 2;
    repeated card deployed = 3;
    repeated card reserve = 4;
    int64 hp = 5;
}

message allPlayerWithCards {
    repeated playerWithCards players = 1;
}

message roomData {
    string id = 1;
    string roomName = 2;
    repeated playerWithCards players = 4;
    int32 maxPlayer = 5;
    int32 maxPlayerDeck = 6;
    int32 maxCurrentDeployment = 7;
    int32 maxDeployment = 8;
    int64 eachPlayerHealth = 9;
    int32 coolDownTime = 10;
    roomReward reward = 11;
}

message roomReward {
    repeated card cardReward = 1;
    int64 cashReward = 2;
    int64 expReward = 3;
}

message allRoom {
    repeated roomData rooms = 1;
}

message playerBattleResult {
    player owner = 1;
    int64 damageReceive = 2;
    int64 enemyAtk = 3;
    int64 ownerDef = 4;
}

message endResult {
    player winner = 1;
    repeated playerBattleResult allBattleResult = 2;

    // for flagging winning status
    // 0 = is enemy player hp is 0
    // 1 = is enemy card is 0
    // 2 = is enemy hp is lower
    int32 flagResult = 3;
    roomReward reward = 4;
}

message allPlayerBattleResult {
    repeated playerBattleResult results = 1;
}

message countDownRoomUpdate {
    int32 battleTime = 1;
    roomData updatedRoom = 2;
}

message roomStream {
    oneof event {
        // for broadcast
        playerWithCards playerJoin = 1;
        playerWithCards playerLeft = 2;
        roomData onRoomUpdate = 3;
        countDownRoomUpdate countDown = 4;
        allPlayerBattleResult battleResult = 5;
        endResult result = 6;

        // for flagging draw status
        // 0 = is all player hp is 0
        // 1 = is all player card is 0 && hp same
        int32 onDraw = 7;
        playerAndCard deployCard = 8;
        playerAndCard pickupCard = 9;

        // for client him self
        roomData getOneRoom = 10;
        exceptionErrorMessage excMessage = 11;
    }

    // for flagging in server
    // 0 = room is good to go
    // 1 = room must be stoped
    int32 roomFlag = 12;

    // for flagging in server and client
    // 0 = all player is not ready 
    // 1 = all player is ready
    // 2 = only some player ready
    int32 playersFlag = 13;

     // for flagging in server
     // 0 = battle countdown is good to go
     // 1 = battle countdown must stop
    int32 battleFlag = 14;


    // for join and leave
    // this for identifier
    string idRoom = 15;
}

message exceptionErrorMessage {
    string exceptionMessage = 1;
    int32 exceptionFlag = 2;
}
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cardBattle.proto

package cardBattle

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Player struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Avatar               string   `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Level                int32    `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Cash                 int32    `protobuf:"varint,5,opt,name=cash,proto3" json:"cash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7a24134b7ec3988, []int{0}
}

func (m *Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Player.Unmarshal(m, b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Player.Marshal(b, m, deterministic)
}
func (m *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(m, src)
}
func (m *Player) XXX_Size() int {
	return xxx_messageInfo_Player.Size(m)
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Player) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Player) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *Player) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Player) GetCash() int32 {
	if m != nil {
		return m.Cash
	}
	return 0
}

type AllPlayer struct {
	Players              []*Player `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AllPlayer) Reset()         { *m = AllPlayer{} }
func (m *AllPlayer) String() string { return proto.CompactTextString(m) }
func (*AllPlayer) ProtoMessage()    {}
func (*AllPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7a24134b7ec3988, []int{1}
}

func (m *AllPlayer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllPlayer.Unmarshal(m, b)
}
func (m *AllPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllPlayer.Marshal(b, m, deterministic)
}
func (m *AllPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllPlayer.Merge(m, src)
}
func (m *AllPlayer) XXX_Size() int {
	return xxx_messageInfo_AllPlayer.Size(m)
}
func (m *AllPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_AllPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_AllPlayer proto.InternalMessageInfo

func (m *AllPlayer) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

type Card struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Image                string   `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Price                int32    `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	Level                int32    `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Atk                  int32    `protobuf:"varint,5,opt,name=atk,proto3" json:"atk,omitempty"`
	Def                  int32    `protobuf:"varint,6,opt,name=def,proto3" json:"def,omitempty"`
	Color                int32    `protobuf:"varint,7,opt,name=color,proto3" json:"color,omitempty"`
	Name                 string   `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Card) Reset()         { *m = Card{} }
func (m *Card) String() string { return proto.CompactTextString(m) }
func (*Card) ProtoMessage()    {}
func (*Card) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7a24134b7ec3988, []int{2}
}

func (m *Card) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Card.Unmarshal(m, b)
}
func (m *Card) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Card.Marshal(b, m, deterministic)
}
func (m *Card) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Card.Merge(m, src)
}
func (m *Card) XXX_Size() int {
	return xxx_messageInfo_Card.Size(m)
}
func (m *Card) XXX_DiscardUnknown() {
	xxx_messageInfo_Card.DiscardUnknown(m)
}

var xxx_messageInfo_Card proto.InternalMessageInfo

func (m *Card) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Card) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Card) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Card) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Card) GetAtk() int32 {
	if m != nil {
		return m.Atk
	}
	return 0
}

func (m *Card) GetDef() int32 {
	if m != nil {
		return m.Def
	}
	return 0
}

func (m *Card) GetColor() int32 {
	if m != nil {
		return m.Color
	}
	return 0
}

func (m *Card) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AllCard struct {
	Cards                []*Card  `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllCard) Reset()         { *m = AllCard{} }
func (m *AllCard) String() string { return proto.CompactTextString(m) }
func (*AllCard) ProtoMessage()    {}
func (*AllCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7a24134b7ec3988, []int{3}
}

func (m *AllCard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllCard.Unmarshal(m, b)
}
func (m *AllCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllCard.Marshal(b, m, deterministic)
}
func (m *AllCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllCard.Merge(m, src)
}
func (m *AllCard) XXX_Size() int {
	return xxx_messageInfo_AllCard.Size(m)
}
func (m *AllCard) XXX_DiscardUnknown() {
	xxx_messageInfo_AllCard.DiscardUnknown(m)
}

var xxx_messageInfo_AllCard proto.InternalMessageInfo

func (m *AllCard) GetCards() []*Card {
	if m != nil {
		return m.Cards
	}
	return nil
}

type PlayerAndCard struct {
	Client               *Player  `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	CardData             *Card    `protobuf:"bytes,2,opt,name=cardData,proto3" json:"cardData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerAndCard) Reset()         { *m = PlayerAndCard{} }
func (m *PlayerAndCard) String() string { return proto.CompactTextString(m) }
func (*PlayerAndCard) ProtoMessage()    {}
func (*PlayerAndCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7a24134b7ec3988, []int{4}
}

func (m *PlayerAndCard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerAndCard.Unmarshal(m, b)
}
func (m *PlayerAndCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerAndCard.Marshal(b, m, deterministic)
}
func (m *PlayerAndCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerAndCard.Merge(m, src)
}
func (m *PlayerAndCard) XXX_Size() int {
	return xxx_messageInfo_PlayerAndCard.Size(m)
}
func (m *PlayerAndCard) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerAndCard.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerAndCard proto.InternalMessageInfo

func (m *PlayerAndCard) GetClient() *Player {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *PlayerAndCard) GetCardData() *Card {
	if m != nil {
		return m.CardData
	}
	return nil
}

type LobbyStream struct {
	// Types that are valid to be assigned to Event:
	//	*LobbyStream_PlayerJoin
	//	*LobbyStream_PlayerLeft
	//	*LobbyStream_CreateRoom
	//	*LobbyStream_ShopRefreshTime
	//	*LobbyStream_ShopRefresh
	//	*LobbyStream_GetOneRoom
	//	*LobbyStream_GetAllRooms
	//	*LobbyStream_GetAllPlayers
	//	*LobbyStream_GetOneplayer
	//	*LobbyStream_PlayerSuccessJoin
	//	*LobbyStream_PlayerSuccessLeft
	//	*LobbyStream_OnePlayerWithCards
	//	*LobbyStream_AllCardInShopping
	//	*LobbyStream_OnBuyCard
	//	*LobbyStream_OnCardBought
	//	*LobbyStream_OnSellCard
	//	*LobbyStream_OnCardSold
	//	*LobbyStream_AddCardToDeck
	//	*LobbyStream_RemoveCardFromDeck
	//	*LobbyStream_OnjoinWaitingRoom
	//	*LobbyStream_OnLeftWaitingRoom
	//	*LobbyStream_OnBattleFound
	//	*LobbyStream_OnBattleNotFound
	Event                isLobbyStream_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *LobbyStream) Reset()         { *m = LobbyStream{} }
func (m *LobbyStream) String() string { return proto.CompactTextString(m) }
func (*LobbyStream) ProtoMessage()    {}
func (*LobbyStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7a24134b7ec3988, []int{5}
}

func (m *LobbyStream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LobbyStream.Unmarshal(m, b)
}
func (m *LobbyStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LobbyStream.Marshal(b, m, deterministic)
}
func (m *LobbyStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LobbyStream.Merge(m, src)
}
func (m *LobbyStream) XXX_Size() int {
	return xxx_messageInfo_LobbyStream.Size(m)
}
func (m *LobbyStream) XXX_DiscardUnknown() {
	xxx_messageInfo_LobbyStream.DiscardUnknown(m)
}

var xxx_messageInfo_LobbyStream proto.InternalMessageInfo

type isLobbyStream_Event interface {
	isLobbyStream_Event()
}

type LobbyStream_PlayerJoin struct {
	PlayerJoin *Player `protobuf:"bytes,1,opt,name=playerJoin,proto3,oneof"`
}

type LobbyStream_PlayerLeft struct {
	PlayerLeft *Player `protobuf:"bytes,2,opt,name=playerLeft,proto3,oneof"`
}

type LobbyStream_CreateRoom struct {
	CreateRoom *RoomData `protobuf:"bytes,3,opt,name=createRoom,proto3,oneof"`
}

type LobbyStream_ShopRefreshTime struct {
	ShopRefreshTime int32 `protobuf:"varint,4,opt,name=shopRefreshTime,proto3,oneof"`
}

type LobbyStream_ShopRefresh struct {
	ShopRefresh bool `protobuf:"varint,5,opt,name=shopRefresh,proto3,oneof"`
}

type LobbyStream_GetOneRoom struct {
	GetOneRoom *RoomData `protobuf:"bytes,6,opt,name=getOneRoom,proto3,oneof"`
}

type LobbyStream_GetAllRooms struct {
	GetAllRooms *AllRoom `protobuf:"bytes,7,opt,name=getAllRooms,proto3,oneof"`
}

type LobbyStream_GetAllPlayers struct {
	GetAllPlayers *AllPlayer `protobuf:"bytes,8,opt,name=getAllPlayers,proto3,oneof"`
}

type LobbyStream_GetOneplayer struct {
	GetOneplayer *Player `protobuf:"bytes,9,opt,name=getOneplayer,proto3,oneof"`
}

type LobbyStream_PlayerSuccessJoin struct {
	PlayerSuccessJoin *Player `protobuf:"bytes,10,opt,name=playerSuccessJoin,proto3,oneof"`
}

type LobbyStream_PlayerSuccessLeft struct {
	PlayerSuccessLeft *Player `protobuf:"bytes,11,opt,name=playerSuccessLeft,proto3,oneof"`
}

type LobbyStream_OnePlayerWithCards struct {
	OnePlayerWithCards *PlayerWithCards `protobuf:"bytes,12,opt,name=onePlayerWithCards,proto3,oneof"`
}

type LobbyStream_AllCardInShopping struct {
	AllCardInShopping *AllCard `protobuf:"bytes,13,opt,name=allCardInShopping,proto3,oneof"`
}

type LobbyStream_OnBuyCard struct {
	OnBuyCard *PlayerAndCard `protobuf:"bytes,14,opt,name=onBuyCard,proto3,oneof"`
}

type LobbyStream_OnCardBought struct {
	OnCardBought bool `protobuf:"varint,15,opt,name=onCardBought,proto3,oneof"`
}

type LobbyStream_OnSellCard struct {
	OnSellCard *PlayerAndCard `protobuf:"bytes,16,opt,name=onSellCard,proto3,oneof"`
}

type LobbyStream_OnCardSold struct {
	OnCardSold bool `protobuf:"varint,17,opt,name=onCardSold,proto3,oneof"`
}

type LobbyStream_AddCardToDeck struct {
	AddCardToDeck *PlayerAndCard `protobuf:"bytes,18,opt,name=addCardToDeck,proto3,oneof"`
}

type LobbyStream_RemoveCardFromDeck struct {
	RemoveCardFromDeck *PlayerAndCard `protobuf:"bytes,19,opt,name=removeCardFromDeck,proto3,oneof"`
}

type LobbyStream_OnjoinWaitingRoom struct {
	OnjoinWaitingRoom *Player `protobuf:"bytes,20,opt,name=onjoinWaitingRoom,proto3,oneof"`
}

type LobbyStream_OnLeftWaitingRoom struct {
	OnLeftWaitingRoom *Player `protobuf:"bytes,21,opt,name=onLeftWaitingRoom,proto3,oneof"`
}

type LobbyStream_OnBattleFound struct {
	OnBattleFound *RoomData `protobuf:"bytes,22,opt,name=onBattleFound,proto3,oneof"`
}

type LobbyStream_OnBattleNotFound struct {
	OnBattleNotFound bool `protobuf:"varint,23,opt,name=onBattleNotFound,proto3,oneof"`
}

func (*LobbyStream_PlayerJoin) isLobbyStream_Event() {}

func (*LobbyStream_PlayerLeft) isLobbyStream_Event() {}

func (*LobbyStream_CreateRoom) isLobbyStream_Event() {}

func (*LobbyStream_ShopRefreshTime) isLobbyStream_Event() {}

func (*LobbyStream_ShopRefresh) isLobbyStream_Event() {}

func (*LobbyStream_GetOneRoom) isLobbyStream_Event() {}

func (*LobbyStream_GetAllRooms) isLobbyStream_Event() {}

func (*LobbyStream_GetAllPlayers) isLobbyStream_Event() {}

func (*LobbyStream_GetOneplayer) isLobbyStream_Event() {}

func (*LobbyStream_PlayerSuccessJoin) isLobbyStream_Event() {}

func (*LobbyStream_PlayerSuccessLeft) isLobbyStream_Event() {}

func (*LobbyStream_OnePlayerWithCards) isLobbyStream_Event() {}

func (*LobbyStream_AllCardInShopping) isLobbyStream_Event() {}

func (*LobbyStream_OnBuyCard) isLobbyStream_Event() {}

func (*LobbyStream_OnCardBought) isLobbyStream_Event() {}

func (*LobbyStream_OnSellCard) isLobbyStream_Event() {}

func (*LobbyStream_OnCardSold) isLobbyStream_Event() {}

func (*LobbyStream_AddCardToDeck) isLobbyStream_Event() {}

func (*LobbyStream_RemoveCardFromDeck) isLobbyStream_Event() {}

func (*LobbyStream_OnjoinWaitingRoom) isLobbyStream_Event() {}

func (*LobbyStream_OnLeftWaitingRoom) isLobbyStream_Event() {}

func (*LobbyStream_OnBattleFound) isLobbyStream_Event() {}

func (*LobbyStream_OnBattleNotFound) isLobbyStream_Event() {}

func (m *LobbyStream) GetEvent() isLobbyStream_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *LobbyStream) GetPlayerJoin() *Player {
	if x, ok := m.GetEvent().(*LobbyStream_PlayerJoin); ok {
		return x.PlayerJoin
	}
	return nil
}

func (m *LobbyStream) GetPlayerLeft() *Player {
	if x, ok := m.GetEvent().(*LobbyStream_PlayerLeft); ok {
		return x.PlayerLeft
	}
	return nil
}

func (m *LobbyStream) GetCreateRoom() *RoomData {
	if x, ok := m.GetEvent().(*LobbyStream_CreateRoom); ok {
		return x.CreateRoom
	}
	return nil
}

func (m *LobbyStream) GetShopRefreshTime() int32 {
	if x, ok := m.GetEvent().(*LobbyStream_ShopRefreshTime); ok {
		return x.ShopRefreshTime
	}
	return 0
}

func (m *LobbyStream) GetShopRefresh() bool {
	if x, ok := m.GetEvent().(*LobbyStream_ShopRefresh); ok {
		return x.ShopRefresh
	}
	return false
}

func (m *LobbyStream) GetGetOneRoom() *RoomData {
	if x, ok := m.GetEvent().(*LobbyStream_GetOneRoom); ok {
		return x.GetOneRoom
	}
	return nil
}

func (m *LobbyStream) GetGetAllRooms() *AllRoom {
	if x, ok := m.GetEvent().(*LobbyStream_GetAllRooms); ok {
		return x.GetAllRooms
	}
	return nil
}

func (m *LobbyStream) GetGetAllPlayers() *AllPlayer {
	if x, ok := m.GetEvent().(*LobbyStream_GetAllPlayers); ok {
		return x.GetAllPlayers
	}
	return nil
}

func (m *LobbyStream) GetGetOneplayer() *Player {
	if x, ok := m.GetEvent().(*LobbyStream_GetOneplayer); ok {
		return x.GetOneplayer
	}
	return nil
}

func (m *LobbyStream) GetPlayerSuccessJoin() *Player {
	if x, ok := m.GetEvent().(*LobbyStream_PlayerSuccessJoin); ok {
		return x.PlayerSuccessJoin
	}
	return nil
}

func (m *LobbyStream) GetPlayerSuccessLeft() *Player {
	if x, ok := m.GetEvent().(*LobbyStream_PlayerSuccessLeft); ok {
		return x.PlayerSuccessLeft
	}
	return nil
}

func (m *LobbyStream) GetOnePlayerWithCards() *PlayerWithCards {
	if x, ok := m.GetEvent().(*LobbyStream_OnePlayerWithCards); ok {
		return x.OnePlayerWithCards
	}
	return nil
}

func (m *LobbyStream) GetAllCardInShopping() *AllCard {
	if x, ok := m.GetEvent().(*LobbyStream_AllCardInShopping); ok {
		return x.AllCardInShopping
	}
	return nil
}

func (m *LobbyStream) GetOnBuyCard() *PlayerAndCard {
	if x, ok := m.GetEvent().(*LobbyStream_OnBuyCard); ok {
		return x.OnBuyCard
	}
	return nil
}

func (m *LobbyStream) GetOnCardBought() bool {
	if x, ok := m.GetEvent().(*LobbyStream_OnCardBought); ok {
		return x.OnCardBought
	}
	return false
}

func (m *LobbyStream) GetOnSellCard() *PlayerAndCard {
	if x, ok := m.GetEvent().(*LobbyStream_OnSellCard); ok {
		return x.OnSellCard
	}
	return nil
}

func (m *LobbyStream) GetOnCardSold() bool {
	if x, ok := m.GetEvent().(*LobbyStream_OnCardSold); ok {
		return x.OnCardSold
	}
	return false
}

func (m *LobbyStream) GetAddCardToDeck() *PlayerAndCard {
	if x, ok := m.GetEvent().(*LobbyStream_AddCardToDeck); ok {
		return x.AddCardToDeck
	}
	return nil
}

func (m *LobbyStream) GetRemoveCardFromDeck() *PlayerAndCard {
	if x, ok := m.GetEvent().(*LobbyStream_RemoveCardFromDeck); ok {
		return x.RemoveCardFromDeck
	}
	return nil
}

func (m *LobbyStream) GetOnjoinWaitingRoom() *Player {
	if x, ok := m.GetEvent().(*LobbyStream_OnjoinWaitingRoom); ok {
		return x.OnjoinWaitingRoom
	}
	return nil
}

func (m *LobbyStream) GetOnLeftWaitingRoom() *Player {
	if x, ok := m.GetEvent().(*LobbyStream_OnLeftWaitingRoom); ok {
		return x.OnLeftWaitingRoom
	}
	return nil
}

func (m *LobbyStream) GetOnBattleFound() *RoomData {
	if x, ok := m.GetEvent().(*LobbyStream_OnBattleFound); ok {
		return x.OnBattleFound
	}
	return nil
}

func (m *LobbyStream) GetOnBattleNotFound() bool {
	if x, ok := m.GetEvent().(*LobbyStream_OnBattleNotFound); ok {
		return x.OnBattleNotFound
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LobbyStream) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LobbyStream_PlayerJoin)(nil),
		(*LobbyStream_PlayerLeft)(nil),
		(*LobbyStream_CreateRoom)(nil),
		(*LobbyStream_ShopRefreshTime)(nil),
		(*LobbyStream_ShopRefresh)(nil),
		(*LobbyStream_GetOneRoom)(nil),
		(*LobbyStream_GetAllRooms)(nil),
		(*LobbyStream_GetAllPlayers)(nil),
		(*LobbyStream_GetOneplayer)(nil),
		(*LobbyStream_PlayerSuccessJoin)(nil),
		(*LobbyStream_PlayerSuccessLeft)(nil),
		(*LobbyStream_OnePlayerWithCards)(nil),
		(*LobbyStream_AllCardInShopping)(nil),
		(*LobbyStream_OnBuyCard)(nil),
		(*LobbyStream_OnCardBought)(nil),
		(*LobbyStream_OnSellCard)(nil),
		(*LobbyStream_OnCardSold)(nil),
		(*LobbyStream_AddCardToDeck)(nil),
		(*LobbyStream_RemoveCardFromDeck)(nil),
		(*LobbyStream_OnjoinWaitingRoom)(nil),
		(*LobbyStream_OnLeftWaitingRoom)(nil),
		(*LobbyStream_OnBattleFound)(nil),
		(*LobbyStream_OnBattleNotFound)(nil),
	}
}

type PlayerWithCards struct {
	Owner                *Player  `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Deck                 []*Card  `protobuf:"bytes,2,rep,name=deck,proto3" json:"deck,omitempty"`
	Deployed             []*Card  `protobuf:"bytes,3,rep,name=deployed,proto3" json:"deployed,omitempty"`
	Reserve              []*Card  `protobuf:"bytes,4,rep,name=reserve,proto3" json:"reserve,omitempty"`
	Hp                   int32    `protobuf:"varint,5,opt,name=hp,proto3" json:"hp,omitempty"`
	AttackPower          int32    `protobuf:"varint,6,opt,name=attackPower,proto3" json:"attackPower,omitempty"`
	DamageReceive        int32    `protobuf:"varint,7,opt,name=damageReceive,proto3" json:"damageReceive,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerWithCards) Reset()         { *m = PlayerWithCards{} }
func (m *PlayerWithCards) String() string { return proto.CompactTextString(m) }
func (*PlayerWithCards) ProtoMessage()    {}
func (*PlayerWithCards) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7a24134b7ec3988, []int{6}
}

func (m *PlayerWithCards) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerWithCards.Unmarshal(m, b)
}
func (m *PlayerWithCards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerWithCards.Marshal(b, m, deterministic)
}
func (m *PlayerWithCards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerWithCards.Merge(m, src)
}
func (m *PlayerWithCards) XXX_Size() int {
	return xxx_messageInfo_PlayerWithCards.Size(m)
}
func (m *PlayerWithCards) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerWithCards.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerWithCards proto.InternalMessageInfo

func (m *PlayerWithCards) GetOwner() *Player {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *PlayerWithCards) GetDeck() []*Card {
	if m != nil {
		return m.Deck
	}
	return nil
}

func (m *PlayerWithCards) GetDeployed() []*Card {
	if m != nil {
		return m.Deployed
	}
	return nil
}

func (m *PlayerWithCards) GetReserve() []*Card {
	if m != nil {
		return m.Reserve
	}
	return nil
}

func (m *PlayerWithCards) GetHp() int32 {
	if m != nil {
		return m.Hp
	}
	return 0
}

func (m *PlayerWithCards) GetAttackPower() int32 {
	if m != nil {
		return m.AttackPower
	}
	return 0
}

func (m *PlayerWithCards) GetDamageReceive() int32 {
	if m != nil {
		return m.DamageReceive
	}
	return 0
}

type AllPlayerWithCards struct {
	Players              []*PlayerWithCards `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AllPlayerWithCards) Reset()         { *m = AllPlayerWithCards{} }
func (m *AllPlayerWithCards) String() string { return proto.CompactTextString(m) }
func (*AllPlayerWithCards) ProtoMessage()    {}
func (*AllPlayerWithCards) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7a24134b7ec3988, []int{7}
}

func (m *AllPlayerWithCards) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllPlayerWithCards.Unmarshal(m, b)
}
func (m *AllPlayerWithCards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllPlayerWithCards.Marshal(b, m, deterministic)
}
func (m *AllPlayerWithCards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllPlayerWithCards.Merge(m, src)
}
func (m *AllPlayerWithCards) XXX_Size() int {
	return xxx_messageInfo_AllPlayerWithCards.Size(m)
}
func (m *AllPlayerWithCards) XXX_DiscardUnknown() {
	xxx_messageInfo_AllPlayerWithCards.DiscardUnknown(m)
}

var xxx_messageInfo_AllPlayerWithCards proto.InternalMessageInfo

func (m *AllPlayerWithCards) GetPlayers() []*PlayerWithCards {
	if m != nil {
		return m.Players
	}
	return nil
}

type RoomData struct {
	Id                   string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RoomName             string             `protobuf:"bytes,2,opt,name=roomName,proto3" json:"roomName,omitempty"`
	Players              []*PlayerWithCards `protobuf:"bytes,4,rep,name=players,proto3" json:"players,omitempty"`
	MaxPlayer            int32              `protobuf:"varint,5,opt,name=maxPlayer,proto3" json:"maxPlayer,omitempty"`
	MaxPlayerDeck        int32              `protobuf:"varint,6,opt,name=maxPlayerDeck,proto3" json:"maxPlayerDeck,omitempty"`
	MaxDeploment         int32              `protobuf:"varint,7,opt,name=maxDeploment,proto3" json:"maxDeploment,omitempty"`
	EachPlayerHealth     int32              `protobuf:"varint,8,opt,name=eachPlayerHealth,proto3" json:"eachPlayerHealth,omitempty"`
	CoolDownTime         int32              `protobuf:"varint,9,opt,name=coolDownTime,proto3" json:"coolDownTime,omitempty"`
	CardReward           []*Card            `protobuf:"bytes,10,rep,name=cardReward,proto3" json:"cardReward,omitempty"`
	CashReward           int32              `protobuf:"varint,11,opt,name=cashReward,proto3" json:"cashReward,omitempty"`
	LevelReward          int32              `protobuf:"varint,12,opt,name=levelReward,proto3" json:"levelReward,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RoomData) Reset()         { *m = RoomData{} }
func (m *RoomData) String() string { return proto.CompactTextString(m) }
func (*RoomData) ProtoMessage()    {}
func (*RoomData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7a24134b7ec3988, []int{8}
}

func (m *RoomData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoomData.Unmarshal(m, b)
}
func (m *RoomData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoomData.Marshal(b, m, deterministic)
}
func (m *RoomData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomData.Merge(m, src)
}
func (m *RoomData) XXX_Size() int {
	return xxx_messageInfo_RoomData.Size(m)
}
func (m *RoomData) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomData.DiscardUnknown(m)
}

var xxx_messageInfo_RoomData proto.InternalMessageInfo

func (m *RoomData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RoomData) GetRoomName() string {
	if m != nil {
		return m.RoomName
	}
	return ""
}

func (m *RoomData) GetPlayers() []*PlayerWithCards {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *RoomData) GetMaxPlayer() int32 {
	if m != nil {
		return m.MaxPlayer
	}
	return 0
}

func (m *RoomData) GetMaxPlayerDeck() int32 {
	if m != nil {
		return m.MaxPlayerDeck
	}
	return 0
}

func (m *RoomData) GetMaxDeploment() int32 {
	if m != nil {
		return m.MaxDeploment
	}
	return 0
}

func (m *RoomData) GetEachPlayerHealth() int32 {
	if m != nil {
		return m.EachPlayerHealth
	}
	return 0
}

func (m *RoomData) GetCoolDownTime() int32 {
	if m != nil {
		return m.CoolDownTime
	}
	return 0
}

func (m *RoomData) GetCardReward() []*Card {
	if m != nil {
		return m.CardReward
	}
	return nil
}

func (m *RoomData) GetCashReward() int32 {
	if m != nil {
		return m.CashReward
	}
	return 0
}

func (m *RoomData) GetLevelReward() int32 {
	if m != nil {
		return m.LevelReward
	}
	return 0
}

type AllRoom struct {
	Rooms                []*RoomData `protobuf:"bytes,1,rep,name=rooms,proto3" json:"rooms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AllRoom) Reset()         { *m = AllRoom{} }
func (m *AllRoom) String() string { return proto.CompactTextString(m) }
func (*AllRoom) ProtoMessage()    {}
func (*AllRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7a24134b7ec3988, []int{9}
}

func (m *AllRoom) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllRoom.Unmarshal(m, b)
}
func (m *AllRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllRoom.Marshal(b, m, deterministic)
}
func (m *AllRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllRoom.Merge(m, src)
}
func (m *AllRoom) XXX_Size() int {
	return xxx_messageInfo_AllRoom.Size(m)
}
func (m *AllRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_AllRoom.DiscardUnknown(m)
}

var xxx_messageInfo_AllRoom proto.InternalMessageInfo

func (m *AllRoom) GetRooms() []*RoomData {
	if m != nil {
		return m.Rooms
	}
	return nil
}

type PlayerBattleResult struct {
	Owner                *Player  `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	DamageReceive        int32    `protobuf:"varint,2,opt,name=damageReceive,proto3" json:"damageReceive,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerBattleResult) Reset()         { *m = PlayerBattleResult{} }
func (m *PlayerBattleResult) String() string { return proto.CompactTextString(m) }
func (*PlayerBattleResult) ProtoMessage()    {}
func (*PlayerBattleResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7a24134b7ec3988, []int{10}
}

func (m *PlayerBattleResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerBattleResult.Unmarshal(m, b)
}
func (m *PlayerBattleResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerBattleResult.Marshal(b, m, deterministic)
}
func (m *PlayerBattleResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerBattleResult.Merge(m, src)
}
func (m *PlayerBattleResult) XXX_Size() int {
	return xxx_messageInfo_PlayerBattleResult.Size(m)
}
func (m *PlayerBattleResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerBattleResult.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerBattleResult proto.InternalMessageInfo

func (m *PlayerBattleResult) GetOwner() *Player {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *PlayerBattleResult) GetDamageReceive() int32 {
	if m != nil {
		return m.DamageReceive
	}
	return 0
}

type AllPlayerBattleResult struct {
	Results              []*PlayerBattleResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *AllPlayerBattleResult) Reset()         { *m = AllPlayerBattleResult{} }
func (m *AllPlayerBattleResult) String() string { return proto.CompactTextString(m) }
func (*AllPlayerBattleResult) ProtoMessage()    {}
func (*AllPlayerBattleResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7a24134b7ec3988, []int{11}
}

func (m *AllPlayerBattleResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllPlayerBattleResult.Unmarshal(m, b)
}
func (m *AllPlayerBattleResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllPlayerBattleResult.Marshal(b, m, deterministic)
}
func (m *AllPlayerBattleResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllPlayerBattleResult.Merge(m, src)
}
func (m *AllPlayerBattleResult) XXX_Size() int {
	return xxx_messageInfo_AllPlayerBattleResult.Size(m)
}
func (m *AllPlayerBattleResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AllPlayerBattleResult.DiscardUnknown(m)
}

var xxx_messageInfo_AllPlayerBattleResult proto.InternalMessageInfo

func (m *AllPlayerBattleResult) GetResults() []*PlayerBattleResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type RoomStream struct {
	// Types that are valid to be assigned to Event:
	//	*RoomStream_PlayerJoin
	//	*RoomStream_PlayerLeft
	//	*RoomStream_OnRoomUpdate
	//	*RoomStream_CountDown
	//	*RoomStream_Result
	//	*RoomStream_OnWinner
	//	*RoomStream_DeployCard
	//	*RoomStream_PickupCard
	//	*RoomStream_GetOneRoom
	Event isRoomStream_Event `protobuf_oneof:"event"`
	// for flagging in server
	// 0 = room is good to go
	// 1 = room must be stoped
	RoomFlag int32 `protobuf:"varint,10,opt,name=roomFlag,proto3" json:"roomFlag,omitempty"`
	// for flagging in server and client
	// 0 = all player is not ready
	// 1 = all player is ready
	// 2 = only some player ready
	PlayersFlag int32 `protobuf:"varint,11,opt,name=playersFlag,proto3" json:"playersFlag,omitempty"`
	// for flagging in server
	// 0 = battle countdown is good to go
	// 1 = battle countdown must stop
	BattleFlag int32 `protobuf:"varint,12,opt,name=battleFlag,proto3" json:"battleFlag,omitempty"`
	// for join and leave
	// this for identifier
	IdRoom               string   `protobuf:"bytes,13,opt,name=idRoom,proto3" json:"idRoom,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomStream) Reset()         { *m = RoomStream{} }
func (m *RoomStream) String() string { return proto.CompactTextString(m) }
func (*RoomStream) ProtoMessage()    {}
func (*RoomStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7a24134b7ec3988, []int{12}
}

func (m *RoomStream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoomStream.Unmarshal(m, b)
}
func (m *RoomStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoomStream.Marshal(b, m, deterministic)
}
func (m *RoomStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomStream.Merge(m, src)
}
func (m *RoomStream) XXX_Size() int {
	return xxx_messageInfo_RoomStream.Size(m)
}
func (m *RoomStream) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomStream.DiscardUnknown(m)
}

var xxx_messageInfo_RoomStream proto.InternalMessageInfo

type isRoomStream_Event interface {
	isRoomStream_Event()
}

type RoomStream_PlayerJoin struct {
	PlayerJoin *PlayerWithCards `protobuf:"bytes,1,opt,name=playerJoin,proto3,oneof"`
}

type RoomStream_PlayerLeft struct {
	PlayerLeft *PlayerWithCards `protobuf:"bytes,2,opt,name=playerLeft,proto3,oneof"`
}

type RoomStream_OnRoomUpdate struct {
	OnRoomUpdate *RoomData `protobuf:"bytes,3,opt,name=onRoomUpdate,proto3,oneof"`
}

type RoomStream_CountDown struct {
	CountDown int32 `protobuf:"varint,4,opt,name=countDown,proto3,oneof"`
}

type RoomStream_Result struct {
	Result *AllPlayerBattleResult `protobuf:"bytes,5,opt,name=result,proto3,oneof"`
}

type RoomStream_OnWinner struct {
	OnWinner *Player `protobuf:"bytes,6,opt,name=onWinner,proto3,oneof"`
}

type RoomStream_DeployCard struct {
	DeployCard *PlayerAndCard `protobuf:"bytes,7,opt,name=deployCard,proto3,oneof"`
}

type RoomStream_PickupCard struct {
	PickupCard *PlayerAndCard `protobuf:"bytes,8,opt,name=pickupCard,proto3,oneof"`
}

type RoomStream_GetOneRoom struct {
	GetOneRoom *RoomData `protobuf:"bytes,9,opt,name=getOneRoom,proto3,oneof"`
}

func (*RoomStream_PlayerJoin) isRoomStream_Event() {}

func (*RoomStream_PlayerLeft) isRoomStream_Event() {}

func (*RoomStream_OnRoomUpdate) isRoomStream_Event() {}

func (*RoomStream_CountDown) isRoomStream_Event() {}

func (*RoomStream_Result) isRoomStream_Event() {}

func (*RoomStream_OnWinner) isRoomStream_Event() {}

func (*RoomStream_DeployCard) isRoomStream_Event() {}

func (*RoomStream_PickupCard) isRoomStream_Event() {}

func (*RoomStream_GetOneRoom) isRoomStream_Event() {}

func (m *RoomStream) GetEvent() isRoomStream_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *RoomStream) GetPlayerJoin() *PlayerWithCards {
	if x, ok := m.GetEvent().(*RoomStream_PlayerJoin); ok {
		return x.PlayerJoin
	}
	return nil
}

func (m *RoomStream) GetPlayerLeft() *PlayerWithCards {
	if x, ok := m.GetEvent().(*RoomStream_PlayerLeft); ok {
		return x.PlayerLeft
	}
	return nil
}

func (m *RoomStream) GetOnRoomUpdate() *RoomData {
	if x, ok := m.GetEvent().(*RoomStream_OnRoomUpdate); ok {
		return x.OnRoomUpdate
	}
	return nil
}

func (m *RoomStream) GetCountDown() int32 {
	if x, ok := m.GetEvent().(*RoomStream_CountDown); ok {
		return x.CountDown
	}
	return 0
}

func (m *RoomStream) GetResult() *AllPlayerBattleResult {
	if x, ok := m.GetEvent().(*RoomStream_Result); ok {
		return x.Result
	}
	return nil
}

func (m *RoomStream) GetOnWinner() *Player {
	if x, ok := m.GetEvent().(*RoomStream_OnWinner); ok {
		return x.OnWinner
	}
	return nil
}

func (m *RoomStream) GetDeployCard() *PlayerAndCard {
	if x, ok := m.GetEvent().(*RoomStream_DeployCard); ok {
		return x.DeployCard
	}
	return nil
}

func (m *RoomStream) GetPickupCard() *PlayerAndCard {
	if x, ok := m.GetEvent().(*RoomStream_PickupCard); ok {
		return x.PickupCard
	}
	return nil
}

func (m *RoomStream) GetGetOneRoom() *RoomData {
	if x, ok := m.GetEvent().(*RoomStream_GetOneRoom); ok {
		return x.GetOneRoom
	}
	return nil
}

func (m *RoomStream) GetRoomFlag() int32 {
	if m != nil {
		return m.RoomFlag
	}
	return 0
}

func (m *RoomStream) GetPlayersFlag() int32 {
	if m != nil {
		return m.PlayersFlag
	}
	return 0
}

func (m *RoomStream) GetBattleFlag() int32 {
	if m != nil {
		return m.BattleFlag
	}
	return 0
}

func (m *RoomStream) GetIdRoom() string {
	if m != nil {
		return m.IdRoom
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RoomStream) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RoomStream_PlayerJoin)(nil),
		(*RoomStream_PlayerLeft)(nil),
		(*RoomStream_OnRoomUpdate)(nil),
		(*RoomStream_CountDown)(nil),
		(*RoomStream_Result)(nil),
		(*RoomStream_OnWinner)(nil),
		(*RoomStream_DeployCard)(nil),
		(*RoomStream_PickupCard)(nil),
		(*RoomStream_GetOneRoom)(nil),
	}
}

func init() {
	proto.RegisterType((*Player)(nil), "cardBattle.player")
	proto.RegisterType((*AllPlayer)(nil), "cardBattle.allPlayer")
	proto.RegisterType((*Card)(nil), "cardBattle.card")
	proto.RegisterType((*AllCard)(nil), "cardBattle.allCard")
	proto.RegisterType((*PlayerAndCard)(nil), "cardBattle.playerAndCard")
	proto.RegisterType((*LobbyStream)(nil), "cardBattle.lobbyStream")
	proto.RegisterType((*PlayerWithCards)(nil), "cardBattle.playerWithCards")
	proto.RegisterType((*AllPlayerWithCards)(nil), "cardBattle.allPlayerWithCards")
	proto.RegisterType((*RoomData)(nil), "cardBattle.roomData")
	proto.RegisterType((*AllRoom)(nil), "cardBattle.allRoom")
	proto.RegisterType((*PlayerBattleResult)(nil), "cardBattle.playerBattleResult")
	proto.RegisterType((*AllPlayerBattleResult)(nil), "cardBattle.allPlayerBattleResult")
	proto.RegisterType((*RoomStream)(nil), "cardBattle.roomStream")
}

func init() { proto.RegisterFile("cardBattle.proto", fileDescriptor_a7a24134b7ec3988) }

var fileDescriptor_a7a24134b7ec3988 = []byte{
	// 1262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0xb6, 0x9d, 0xc8, 0x3f, 0xc7, 0x71, 0xe3, 0xb0, 0x49, 0xab, 0x65, 0x43, 0x91, 0x09, 0xc5,
	0x10, 0x04, 0x45, 0xd1, 0x65, 0xeb, 0xd6, 0xae, 0xeb, 0x45, 0x7e, 0x10, 0x78, 0x6b, 0xd6, 0x66,
	0x72, 0x87, 0x5c, 0x33, 0x12, 0x63, 0x6b, 0x91, 0x49, 0x41, 0xa6, 0x9d, 0xe6, 0x05, 0xf6, 0x02,
	0xbb, 0xda, 0x0b, 0xec, 0x89, 0xf6, 0x1e, 0x7b, 0x85, 0xe1, 0x90, 0xb4, 0x44, 0xdb, 0xb2, 0xe3,
	0xdd, 0x89, 0x1f, 0xbf, 0xf3, 0xc3, 0xc3, 0x73, 0x78, 0x8e, 0xa0, 0x1d, 0xd0, 0x34, 0x3c, 0xa6,
	0x52, 0xc6, 0xec, 0x79, 0x92, 0x0a, 0x29, 0x08, 0xe4, 0x88, 0xc7, 0xa1, 0x9a, 0xc4, 0xf4, 0x8e,
	0xa5, 0xe4, 0x01, 0x54, 0xa2, 0xd0, 0x2d, 0xef, 0x95, 0xf7, 0x1b, 0x7e, 0x25, 0x0a, 0x09, 0x81,
	0x75, 0x4e, 0x07, 0xcc, 0xad, 0x28, 0x44, 0x7d, 0x93, 0x47, 0x50, 0xa5, 0x63, 0x2a, 0x69, 0xea,
	0xae, 0x29, 0xd4, 0xac, 0xc8, 0x36, 0x38, 0x31, 0x1b, 0xb3, 0xd8, 0x5d, 0xdf, 0x2b, 0xef, 0x3b,
	0xbe, 0x5e, 0xa0, 0x86, 0x80, 0x0e, 0xfb, 0xae, 0xa3, 0x40, 0xf5, 0xed, 0xbd, 0x86, 0x06, 0x8d,
	0xe3, 0x0b, 0x6d, 0xf2, 0x19, 0xd4, 0xb4, 0xf1, 0xa1, 0x5b, 0xde, 0x5b, 0xdb, 0x6f, 0x1e, 0x92,
	0xe7, 0xb6, 0xb3, 0x6a, 0xcb, 0x9f, 0x50, 0xbc, 0xbf, 0xcb, 0xa8, 0x2f, 0x0d, 0xe7, 0x3c, 0xdd,
	0x06, 0x27, 0x1a, 0xd0, 0xde, 0xc4, 0x55, 0xbd, 0x40, 0x34, 0x49, 0xa3, 0x80, 0x29, 0x57, 0x1d,
	0x5f, 0x2f, 0x16, 0x78, 0xda, 0x86, 0x35, 0x2a, 0x6f, 0x8c, 0xa3, 0xf8, 0x89, 0x48, 0xc8, 0xae,
	0xdd, 0xaa, 0x46, 0x42, 0x76, 0x8d, 0x92, 0x81, 0x88, 0x45, 0xea, 0xd6, 0xb4, 0xa4, 0x5a, 0x64,
	0x51, 0xaa, 0xe7, 0x51, 0xf2, 0xbe, 0x86, 0x1a, 0x8d, 0xe3, 0x13, 0x74, 0xf5, 0x2b, 0x70, 0xd0,
	0xe5, 0xc9, 0xf9, 0xda, 0xf6, 0xf9, 0xf0, 0xd3, 0xd7, 0xdb, 0x5e, 0x04, 0x2d, 0x7d, 0xcc, 0x23,
	0x1e, 0x2a, 0xc1, 0x03, 0xa8, 0x06, 0x71, 0xc4, 0xb8, 0x54, 0xe7, 0x2c, 0x8e, 0x8c, 0x61, 0x90,
	0x67, 0x50, 0xc7, 0xcd, 0x53, 0x2a, 0xa9, 0x0a, 0x41, 0x91, 0x9d, 0x8c, 0xe1, 0xfd, 0x03, 0xd0,
	0x8c, 0xc5, 0xd5, 0xd5, 0x5d, 0x57, 0xa6, 0x8c, 0x0e, 0xc8, 0xb7, 0x00, 0x5a, 0xdf, 0xcf, 0x22,
	0xe2, 0x8b, 0xad, 0x75, 0x4a, 0xbe, 0xc5, 0xcb, 0xa5, 0xce, 0xd9, 0xb5, 0x34, 0x56, 0x97, 0x4a,
	0x21, 0x8f, 0x7c, 0x07, 0x10, 0xa4, 0x8c, 0x4a, 0xe6, 0x0b, 0x31, 0x50, 0x17, 0xd3, 0x3c, 0xdc,
	0xb6, 0xa5, 0x52, 0x21, 0x06, 0xe8, 0x25, 0xca, 0xe5, 0x4c, 0x72, 0x00, 0x9b, 0xc3, 0xbe, 0x48,
	0x7c, 0x76, 0x9d, 0xb2, 0x61, 0xff, 0x63, 0x34, 0x60, 0xfa, 0xfe, 0x3a, 0x25, 0x7f, 0x76, 0x83,
	0x78, 0xd0, 0xb4, 0x20, 0x75, 0xa7, 0xf5, 0x4e, 0xc9, 0xb7, 0x41, 0xf4, 0xa3, 0xc7, 0xe4, 0x07,
	0xae, 0xfd, 0xa8, 0x2e, 0xf7, 0x23, 0x67, 0x92, 0xef, 0xa1, 0xd9, 0x63, 0xf2, 0x28, 0x8e, 0x71,
	0x35, 0x54, 0x99, 0xd0, 0x3c, 0x7c, 0x68, 0x0b, 0x52, 0xbd, 0x87, 0x06, 0x2d, 0x26, 0x79, 0x0b,
	0x2d, 0xbd, 0xbc, 0x30, 0xf9, 0x5e, 0x57, 0xa2, 0x3b, 0x33, 0xa2, 0x17, 0x93, 0xa0, 0x4d, 0xb3,
	0xc9, 0x2b, 0xd8, 0xd0, 0x5e, 0xe8, 0x58, 0xba, 0x8d, 0x25, 0xf1, 0x9e, 0x62, 0x92, 0x63, 0xd8,
	0xd2, 0x5f, 0xdd, 0x51, 0x10, 0xb0, 0xe1, 0x50, 0x5d, 0x32, 0x2c, 0x11, 0x9f, 0xa7, 0xcf, 0xe9,
	0x50, 0x57, 0xde, 0x5c, 0x59, 0x87, 0xba, 0xf9, 0x5f, 0x80, 0x08, 0xce, 0xf4, 0x79, 0x2e, 0x23,
	0xd9, 0x3f, 0x51, 0x55, 0xb1, 0xa1, 0x94, 0x7c, 0x3e, 0xaf, 0x24, 0xa3, 0x74, 0x4a, 0x7e, 0x81,
	0x20, 0x39, 0x81, 0x2d, 0x53, 0x62, 0x3f, 0xf1, 0x6e, 0x5f, 0x24, 0x49, 0xc4, 0x7b, 0x6e, 0xab,
	0xf0, 0x3a, 0x90, 0x84, 0x3e, 0xcd, 0xf1, 0xc9, 0x6b, 0x68, 0x08, 0x7e, 0x3c, 0xba, 0x43, 0xd8,
	0x7d, 0xa0, 0x84, 0x3f, 0x9b, 0x77, 0xc5, 0x54, 0x64, 0xa7, 0xe4, 0xe7, 0x6c, 0xf2, 0x14, 0x36,
	0x04, 0xc7, 0xaf, 0x63, 0x31, 0xea, 0xf5, 0xa5, 0xbb, 0x69, 0xb2, 0x6c, 0x0a, 0x25, 0x6f, 0x00,
	0x04, 0xef, 0x32, 0x6d, 0xd8, 0x6d, 0xdf, 0x6f, 0xc1, 0xa2, 0x93, 0x3d, 0x14, 0xc6, 0xaf, 0xae,
	0x88, 0x43, 0x77, 0xcb, 0x18, 0xb0, 0x30, 0x72, 0x04, 0x2d, 0x1a, 0x2a, 0xd1, 0x8f, 0xe2, 0x94,
	0x05, 0x37, 0x2e, 0xb9, 0xdf, 0xc2, 0xb4, 0x04, 0x79, 0x07, 0x24, 0x65, 0x03, 0x31, 0x66, 0x88,
	0x9d, 0xa5, 0x62, 0xa0, 0xf4, 0x3c, 0xbc, 0x5f, 0x4f, 0x81, 0x18, 0xe6, 0x89, 0xe0, 0xbf, 0x8b,
	0x88, 0x5f, 0xd2, 0x48, 0x46, 0xbc, 0xa7, 0x8a, 0x6b, 0x7b, 0x59, 0x9e, 0xcc, 0xd1, 0xb5, 0x0e,
	0xcc, 0x18, 0x5b, 0xc7, 0xce, 0x72, 0x1d, 0x33, 0x74, 0xf2, 0x23, 0xb4, 0x04, 0xd7, 0xbc, 0x33,
	0x31, 0xe2, 0xa1, 0xfb, 0x68, 0x69, 0x81, 0x4f, 0x93, 0xc9, 0x33, 0x68, 0x4f, 0x80, 0xf7, 0x42,
	0x6a, 0x05, 0x8f, 0x4d, 0xf4, 0xe7, 0x76, 0x8e, 0x6b, 0xe0, 0xb0, 0x31, 0xe3, 0xd2, 0xfb, 0xb3,
	0x02, 0x9b, 0x33, 0xb9, 0x4b, 0xf6, 0xc1, 0x11, 0xb7, 0x9c, 0xa5, 0x4b, 0xde, 0x70, 0x4d, 0x20,
	0x4f, 0x61, 0x3d, 0xc4, 0xc8, 0x57, 0x16, 0xb4, 0x09, 0xb5, 0x8b, 0x0f, 0x7d, 0xc8, 0x92, 0x58,
	0xdc, 0xb1, 0xd0, 0x5d, 0x5b, 0xc0, 0xcc, 0x18, 0xe4, 0x00, 0x6a, 0x29, 0x1b, 0xb2, 0x74, 0x8c,
	0x8f, 0x65, 0x31, 0x79, 0x42, 0xc0, 0x96, 0xda, 0x4f, 0x4c, 0xff, 0xab, 0xf4, 0x13, 0xb2, 0x07,
	0x4d, 0x2a, 0x25, 0x0d, 0x6e, 0x2e, 0xc4, 0x2d, 0x4b, 0x4d, 0x1b, 0xb4, 0x21, 0xf2, 0x14, 0x5a,
	0x21, 0xc5, 0x46, 0xeb, 0xb3, 0x80, 0x45, 0x63, 0x66, 0xda, 0xe2, 0x34, 0xe8, 0xbd, 0x03, 0x92,
	0x3d, 0x6b, 0x79, 0x5c, 0x5e, 0xce, 0xf6, 0xfd, 0x65, 0x2f, 0x40, 0x3e, 0x00, 0xfc, 0xb5, 0x06,
	0xf5, 0xc9, 0xbd, 0xcd, 0x0d, 0x01, 0xbb, 0x7a, 0xef, 0x7d, 0x3e, 0xb2, 0x64, 0x6b, 0xdb, 0xde,
	0xfa, 0xea, 0xf6, 0xc8, 0x17, 0xd0, 0x18, 0xd0, 0x4f, 0xda, 0x79, 0x13, 0x9b, 0x1c, 0xc0, 0x00,
	0x64, 0x0b, 0x55, 0x35, 0x3a, 0x48, 0xd3, 0x20, 0xf1, 0x60, 0x63, 0x40, 0x3f, 0x9d, 0xe2, 0x9d,
	0x0c, 0xb0, 0x9b, 0xeb, 0x28, 0x4d, 0x61, 0xe4, 0x00, 0xda, 0x8c, 0x06, 0x7d, 0xf3, 0xf8, 0x33,
	0x1a, 0xcb, 0xbe, 0xea, 0x0f, 0x8e, 0x3f, 0x87, 0xa3, 0xbe, 0x40, 0x88, 0xf8, 0x54, 0xdc, 0x72,
	0xd5, 0x06, 0x1b, 0x5a, 0x9f, 0x8d, 0x91, 0x17, 0xa0, 0x26, 0x3c, 0x9f, 0xdd, 0xe2, 0xb3, 0x03,
	0x0b, 0xee, 0xde, 0xe2, 0x90, 0x27, 0x28, 0x31, 0xec, 0x1b, 0x89, 0xa6, 0xd2, 0x69, 0x21, 0x98,
	0x0e, 0x6a, 0x50, 0x32, 0x84, 0x0d, 0x9d, 0x0e, 0x16, 0xe4, 0xbd, 0x54, 0x33, 0x8f, 0x69, 0xd6,
	0x4e, 0xaa, 0xda, 0xa3, 0xbe, 0xdb, 0xc2, 0xb2, 0xf3, 0x35, 0xc5, 0x0b, 0x81, 0xe8, 0x68, 0xeb,
	0x7d, 0x9f, 0x0d, 0x47, 0xb1, 0xfc, 0x5f, 0x75, 0x33, 0x93, 0x85, 0x95, 0xa2, 0x2c, 0xfc, 0x15,
	0x76, 0xb2, 0x2c, 0x9c, 0x32, 0xf4, 0x4a, 0x95, 0xc8, 0x28, 0x96, 0x13, 0x67, 0x9f, 0xcc, 0x9b,
	0xb2, 0x05, 0xfc, 0x09, 0xdd, 0xfb, 0xc3, 0x01, 0xc0, 0x23, 0x98, 0x21, 0xea, 0x6d, 0xc1, 0x10,
	0x75, 0x4f, 0x5b, 0xb3, 0xa7, 0xa9, 0xb7, 0x05, 0xd3, 0xd4, 0x6a, 0xe2, 0xaa, 0xb9, 0xfe, 0x80,
	0xdd, 0x08, 0x63, 0xff, 0x5b, 0x12, 0x52, 0xc9, 0xee, 0x19, 0xac, 0xa6, 0xb8, 0xe4, 0x09, 0x34,
	0x02, 0x31, 0xe2, 0x12, 0xb3, 0x27, 0x1b, 0xaa, 0x72, 0x88, 0xbc, 0x81, 0xaa, 0x3e, 0xb3, 0xaa,
	0x80, 0xe6, 0xe1, 0x97, 0x85, 0x23, 0x8b, 0x1d, 0xa4, 0x4e, 0xc9, 0x37, 0x22, 0xe4, 0x05, 0xd4,
	0x05, 0xbf, 0x8c, 0x38, 0x37, 0x6f, 0xc8, 0xa2, 0x47, 0x3c, 0x63, 0x61, 0xcb, 0xd4, 0x0f, 0x98,
	0x6a, 0x99, 0xb5, 0x15, 0x5a, 0x66, 0x4e, 0x47, 0xe1, 0x24, 0x0a, 0x6e, 0x46, 0x89, 0x12, 0xae,
	0xaf, 0x20, 0x9c, 0xd3, 0x67, 0x66, 0xc2, 0xc6, 0xca, 0x33, 0xa1, 0x79, 0x78, 0xce, 0x62, 0xda,
	0x53, 0x83, 0x95, 0xe3, 0x67, 0x6b, 0xac, 0x1b, 0xf3, 0x98, 0xa8, 0x6d, 0x5d, 0x58, 0x36, 0x84,
	0x95, 0x77, 0xa5, 0x9b, 0x0f, 0x12, 0x74, 0x61, 0x59, 0x08, 0xfe, 0x71, 0x45, 0xa1, 0xf2, 0xa8,
	0xa5, 0xff, 0xb8, 0xf4, 0x2a, 0xeb, 0x3b, 0x87, 0xff, 0x96, 0x61, 0x2b, 0x77, 0xb2, 0xcb, 0xd2,
	0x31, 0xfe, 0xe6, 0xbc, 0x81, 0xcd, 0x1c, 0x3c, 0x17, 0xbd, 0x88, 0x93, 0x82, 0xc8, 0xef, 0x16,
	0x60, 0x5e, 0x89, 0x9c, 0xc3, 0x76, 0x0e, 0xfb, 0x79, 0x92, 0x3f, 0x9a, 0x8d, 0x86, 0xc6, 0x77,
	0x17, 0xe0, 0x5e, 0x69, 0xbf, 0xfc, 0xa2, 0x4c, 0x3e, 0xc0, 0x8e, 0xed, 0x4a, 0xfe, 0xe3, 0xf1,
	0xd8, 0x16, 0xb3, 0xfe, 0x48, 0x76, 0x17, 0x6d, 0x68, 0x85, 0x57, 0x55, 0xf5, 0x17, 0xfb, 0xcd,
	0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x18, 0x94, 0x8f, 0x79, 0xd9, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CardBattleServiceClient is the client API for CardBattleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CardBattleServiceClient interface {
	CardBattleLogin(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error)
	CardBattleRoomStream(ctx context.Context, opts ...grpc.CallOption) (CardBattleService_CardBattleRoomStreamClient, error)
	CardBattleLobbyStream(ctx context.Context, opts ...grpc.CallOption) (CardBattleService_CardBattleLobbyStreamClient, error)
}

type cardBattleServiceClient struct {
	cc *grpc.ClientConn
}

func NewCardBattleServiceClient(cc *grpc.ClientConn) CardBattleServiceClient {
	return &cardBattleServiceClient{cc}
}

func (c *cardBattleServiceClient) CardBattleLogin(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/cardBattle.cardBattleService/cardBattleLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardBattleServiceClient) CardBattleRoomStream(ctx context.Context, opts ...grpc.CallOption) (CardBattleService_CardBattleRoomStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CardBattleService_serviceDesc.Streams[0], "/cardBattle.cardBattleService/cardBattleRoomStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardBattleServiceCardBattleRoomStreamClient{stream}
	return x, nil
}

type CardBattleService_CardBattleRoomStreamClient interface {
	Send(*RoomStream) error
	Recv() (*RoomStream, error)
	grpc.ClientStream
}

type cardBattleServiceCardBattleRoomStreamClient struct {
	grpc.ClientStream
}

func (x *cardBattleServiceCardBattleRoomStreamClient) Send(m *RoomStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardBattleServiceCardBattleRoomStreamClient) Recv() (*RoomStream, error) {
	m := new(RoomStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardBattleServiceClient) CardBattleLobbyStream(ctx context.Context, opts ...grpc.CallOption) (CardBattleService_CardBattleLobbyStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CardBattleService_serviceDesc.Streams[1], "/cardBattle.cardBattleService/cardBattleLobbyStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardBattleServiceCardBattleLobbyStreamClient{stream}
	return x, nil
}

type CardBattleService_CardBattleLobbyStreamClient interface {
	Send(*LobbyStream) error
	Recv() (*LobbyStream, error)
	grpc.ClientStream
}

type cardBattleServiceCardBattleLobbyStreamClient struct {
	grpc.ClientStream
}

func (x *cardBattleServiceCardBattleLobbyStreamClient) Send(m *LobbyStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardBattleServiceCardBattleLobbyStreamClient) Recv() (*LobbyStream, error) {
	m := new(LobbyStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CardBattleServiceServer is the server API for CardBattleService service.
type CardBattleServiceServer interface {
	CardBattleLogin(context.Context, *Player) (*Player, error)
	CardBattleRoomStream(CardBattleService_CardBattleRoomStreamServer) error
	CardBattleLobbyStream(CardBattleService_CardBattleLobbyStreamServer) error
}

// UnimplementedCardBattleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCardBattleServiceServer struct {
}

func (*UnimplementedCardBattleServiceServer) CardBattleLogin(ctx context.Context, req *Player) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardBattleLogin not implemented")
}
func (*UnimplementedCardBattleServiceServer) CardBattleRoomStream(srv CardBattleService_CardBattleRoomStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CardBattleRoomStream not implemented")
}
func (*UnimplementedCardBattleServiceServer) CardBattleLobbyStream(srv CardBattleService_CardBattleLobbyStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CardBattleLobbyStream not implemented")
}

func RegisterCardBattleServiceServer(s *grpc.Server, srv CardBattleServiceServer) {
	s.RegisterService(&_CardBattleService_serviceDesc, srv)
}

func _CardBattleService_CardBattleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardBattleServiceServer).CardBattleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardBattle.cardBattleService/CardBattleLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardBattleServiceServer).CardBattleLogin(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardBattleService_CardBattleRoomStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardBattleServiceServer).CardBattleRoomStream(&cardBattleServiceCardBattleRoomStreamServer{stream})
}

type CardBattleService_CardBattleRoomStreamServer interface {
	Send(*RoomStream) error
	Recv() (*RoomStream, error)
	grpc.ServerStream
}

type cardBattleServiceCardBattleRoomStreamServer struct {
	grpc.ServerStream
}

func (x *cardBattleServiceCardBattleRoomStreamServer) Send(m *RoomStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardBattleServiceCardBattleRoomStreamServer) Recv() (*RoomStream, error) {
	m := new(RoomStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CardBattleService_CardBattleLobbyStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardBattleServiceServer).CardBattleLobbyStream(&cardBattleServiceCardBattleLobbyStreamServer{stream})
}

type CardBattleService_CardBattleLobbyStreamServer interface {
	Send(*LobbyStream) error
	Recv() (*LobbyStream, error)
	grpc.ServerStream
}

type cardBattleServiceCardBattleLobbyStreamServer struct {
	grpc.ServerStream
}

func (x *cardBattleServiceCardBattleLobbyStreamServer) Send(m *LobbyStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardBattleServiceCardBattleLobbyStreamServer) Recv() (*LobbyStream, error) {
	m := new(LobbyStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CardBattleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cardBattle.cardBattleService",
	HandlerType: (*CardBattleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "cardBattleLogin",
			Handler:    _CardBattleService_CardBattleLogin_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "cardBattleRoomStream",
			Handler:       _CardBattleService_CardBattleRoomStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "cardBattleLobbyStream",
			Handler:       _CardBattleService_CardBattleLobbyStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cardBattle.proto",
}
